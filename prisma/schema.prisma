// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id String    @id @default(uuid())
  name String
  userId String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  sizes Size[] @relation("StoreToSize")
  colors Color[] @relation("StoreToColor")
  products Product[] @relation("StoreToProduct")
  orders Order[] @relation("StoreToOrder")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
}

model Billboard {
  id String    @id @default(uuid())
  storeId String
  store Store @relation("StoreToBillboard", fields:[storeId], references: [id])
  label String
  imageUrl String
  categories Category[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
 
}

model Category {
  id String    @id @default(uuid())
  storeId String
  store Store @relation("StoreToCategory", fields:[storeId], references: [id])
  billboardId String
  billboard Billboard @relation(fields: [billboardId], references: [id])
  products Product[] @relation("CategoryToProduct")
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
 
}

model Size {
  id String    @id @default(uuid())
  storeId String
  store Store @relation("StoreToSize", fields:[storeId], references: [id])
  name String
  value String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
 
 
}

model Color {
  id String    @id @default(uuid())
  storeId String
  store Store @relation("StoreToColor", fields:[storeId], references: [id])
  name String
  value String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
 
 
}

model Product {
  id String    @id @default(uuid())
  storeId String
  store Store @relation("StoreToProduct", fields:[storeId], references: [id])
  categoryId String
  category Category @relation("CategoryToProduct", fields:[categoryId], references: [id])
  name String
  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String
  size Size @relation( fields:[sizeId], references: [id])
  colorId String
  color Color @relation( fields:[colorId], references: [id])
  images Image[]
  orderItems OrderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id String    @id @default(uuid())
  productId String
  product Product @relation( fields:[productId], references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model FormData {
  id                   String   @id @default(uuid()) // معرف فريد للبيانات المدخلة في الفورم
  orderId             String?   // معرف الطلب المرتبط
  order                Order?    @relation(fields: [orderId], references: [id], onDelete: Cascade) // ربط البيانات المدخلة بالطلب
  senderName           String   // اسم المرسل
  senderPhone          String   // هاتف المرسل
  recipientName        String   // اسم المستلم
  recipientPhone       String   // هاتف المستلم
  recipientAddress     String   // عنوان المستلم
  additionalNotes      String   // ملاحظات إضافية يدخلها المستخدم
  createdAt            DateTime @default(now()) // تاريخ الإدخال
  updatedAt            DateTime @updatedAt // تاريخ التحديث الأخير
  
  @@index([orderId]) // فهرسة معرف الطلب
}


model Order {
  id         String   @id @default(uuid()) // معرف فريد للطلب
  storeId    String
  store      Store    @relation("StoreToOrder", fields:[storeId], references: [id])
  userId     String  // معرف المستخدم الذي قام بالطلب
  userName   String  // اسم المستخدم
  userEmail  String  // البريد الإلكتروني للمستخدم
  user       User     @relation(fields: [userId], references: [id]) // ربط الطلب بالمستخدم
  orderItems OrderItem[]
  isPaid     Boolean  @default(false)
  status     String   @default("تم استلام الطلب")
  phone      String   @default("")
  address    String   @default("")
  formData   FormData[]// العلاقة الجديدة مع جدول FormData
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([storeId])
  @@index([userId])
}



model OrderItem {
  id String    @id @default(uuid())
  orderId String
  order Order @relation( fields:[orderId], references: [id])
  productId       String?
  product         Product? @relation(fields: [productId], references: [id])
  productName     String   // حقل لاسم المنتج
  productPrice    Decimal  // حقل لسعر المنتج
  productImageUrl String   // حقل لرابط صورة المنتج
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model User {
  id        String   @id @default(uuid()) // معرف فريد للمستخدم
  email     String   @unique // البريد الإلكتروني
  name      String // اسم المستخدم
  orders    Order[]  // علاقة تربط المستخدم بالطلبات
  createdAt DateTime @default(now()) // تاريخ الإنشاء
  updatedAt DateTime @updatedAt // تاريخ التحديث الأخير
}